// Do not mess with the following 6 lines
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
plugins {
  id 'com.github.johnrengelman.shadow' version '5.1.0'
  id 'java'
  id 'application'
}

// Change the line below if you change the name of your main Java class
// Comment this line and uncomment the line after it to build/run the Server, and vice versa to run the main vision program
mainClassName = 'ca.team2706.fvts.main.Main'

// Change the line below to change the name of the output jar
def projectName = 'FVTS'
def version = '2.0'

task setbuildType{
  doFirst{
  if (project.hasProperty('buildType')){
    ext.buildType = project.findProperty("buildType")
  }else{
    println "No build type selected! Exiting!"
    println "Options are: windows, arm-raspbian, linux-x86_64, armhf"
    throw new GradleException('no build type selected!')
  }
  }
}

task settestType{
  doFirst{
  if (project.hasProperty('testType')){
    ext.testType = project.findProperty("testType")
  }else{
    println "No test type selected! Assuming BuildType is the test type!"
    if (project.hasProperty('buildType')){
      ext.testType = project.findProperty("buildType")
    }else{
      println "No build type selected! Exiting!"
      println "Options are: windows, arm-raspbian, linux-x86_64, armhf"
      throw new GradleException('no build type selected!')
    }
  }
  }
}

// Shouldn't need to change anything below this point
apply from: 'dependencies.gradle'

sourceSets {
    main {
        java {
            srcDir 'src/main/java/'
        }
    }
    test {
        java{
	        srcDir 'src/test/java/'
        }
    }
}

repositories {
    mavenCentral()
    maven {
      url "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

dependencies {
  compile ntcoreDep()
  compile 'org.opencv:opencv-java:3.1.0'
  compile 'edu.wpi.first.cameraserver:cameraserver-java:+:'
  compile 'junit:junit:4.12'
  compile cscoreDep()
  compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
  
  testCompile 'junit:junit:4.12'
  testCompile tntcoreDep()
  testCompile 'org.opencv:opencv-java:3.1.0'
  testCompile 'edu.wpi.first.cameraserver:cameraserver-java:+:'
  testCompile tcscoreDep()
}

jar {
  baseName = projectName
}

shadowJar {
  baseName = projectName
}
task libraryJar(type: ShadowJar){
	classifier = "lib"
	configurations = [ project.configurations.runtime ]
        manifest.inheritFrom project.tasks.jar.manifest
        exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'ca/team2706/vision/**/*')
}

distributions {
  main {
    baseName = projectName
    contents {
      from (openCvUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
        into 'bin/'
      }
    }
  }
}

def outputDirectory = file("${rootDir}/output")

task writeExecuteScript() {
  dependsOn jar
  doLast {
    def runFile = new File("${buildDir}/run${projectName}.bat")
    runFile.write "java -Djava.library.path=. -jar ${projectName}-all.jar"
    def runFile2 = new File("${buildDir}/run${projectName}")
    runFile2.write "#!/bin/bash\njava -Djava.library.path=. -jar ${projectName}-all.jar"
  }
}

task copyToOutput(type: Copy) {
  dependsOn shadowJar
  dependsOn unzipOpenCv
  dependsOn writeExecuteScript
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (openCvUnzipLocation) {
    exclude 'META-INF'
    exclude '**/MANIFEST.MF'
  }
  from (file("${buildDir}/run${projectName}.bat")) {
  }
  from (file("${buildDir}/run${projectName}")) {
  }
}


task zipOutput(type: Zip) {
  baseName = projectName
  duplicatesStrategy = 'exclude'
  dependsOn shadowJar
  dependsOn unzipOpenCv
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (openCvUnzipLocation) {
    exclude 'META-INF'
    exclude '**/MANIFEST.MF'
  }
  from (file("${buildDir}/run${projectName}.bat")) {
  }
  from (file("${buildDir}/run${projectName}")) {
    fileMode 0777
  }
}



tasks.withType(Test) {
    systemProperty "java.library.path", "${buildDir}/tests/opencv"
    scanForTestClasses = false
    include "**/*Test.class"
}

build.dependsOn setbuildType
test.dependsOn settestType

distZip.dependsOn unzipOpenCv
distTar.dependsOn unzipOpenCv

applicationDefaultJvmArgs = ["-Djava.library.path=${openCvUnzipLocation}"]

test.dependsOn tunzipOpenCv

build.dependsOn copyToOutput
build.dependsOn zipOutput
build.dependsOn libraryJar
run.dependsOn unzipOpenCv

clean {
    delete outputDirectory
}
